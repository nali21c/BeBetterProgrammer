1. 코드에 신경 쓰기

경력이 적다고 혹은 많다고 좋은 개발자와 나쁜 개발자가 아니다.
나쁜 프로그래머는 덩치만 큰 나쁜 코드를 작성한다. 좋은 코드를 작성하려면 코드에 엄청난 노력을 들여야 한다. 
하지만 좋은 코드에만 신경을 쓰다보면 그저 좋은 코드를 작성하는 데 그칠수도 있다.

어떤 코딩 환경에서 단지 작동만 하도록 보이는 코딩은 거부해야 한다. 다른 프로그래머들이 이해하기 쉽도록 의도가 드러나는 코드를 작성해야하며, 
개발 이후 쉽게 수정할 수 있도록 유지보수가 가능해야 한다. 정확해야 한다.

개발자들끼리의 협업 또한 중요한 요소이다. 극소수의 프로그래머에 해당되지 않는다면, 어떤 프로그래머도 혼자 일할 수 없다. 내가 좋은 소프트웨어를 만들어 낼 것이다라고
생각하기보단 협업자들이 읽을 수 있고 팀이 가장 좋은 결과물을 만들어 내기를 원해야 한다.

새로운 기술에 대해 꾸준히 관심을 갖으며 문법, 기술을 익혀나가야한다. 하지만 그 기술들에 대해서 실무적으로 적절한 상황에 한정하여야 한다.

2. 정돈된 코드 유지하기

좋은 개발자들은 코드의 미관에 신경써야 한다. 하지만 과도한 집중은 코드의 일부가 주어졌을 때, 레이아웃에서 찾아낼 수 있는 것이 전부가 될 수 있다.

2.1 보이는 것은 강력하다

좋은 레이아웃이란 보기에 예쁜 것이 아니다. 내용의 명백과 일관성이다. 한마디로 의도만을 보여주는 코드이다.
(ex. 네이밍) - 잘못된 네이밍으로 작업하게 된다면 많은 버그가 생길 것이 분명하다.

2.2 의사소통

컴파일러와 협업자를 위해 코딩하라. 읽기 어려운 코드는 작업하기도 어렵다.

2.3 레이아웃

탭 vs 스페이스. 당신의 코드 구조를 개선하고 의도를 드러내는 데 도움이 되는 한, 어떤 레이아웃을 택하든 상관없다.

2.3.1 구조 잘 잡기

글쓰듯 코드를 작성하라. 코드를 읽을 사람을 고려하여 합리적인 순서로 API 배치. 가장 중요한 정보는 제일 처음에. 즉 public 은 private 보다 먼저 적는다.

2.3.2 일관성

팀끼리의 개발은 동일성이 있어야 한다. 스스로 생각하기에 더 예쁘거나 더 나아 보이는 자신만의 고유한 스타일은 사용하지 않는다. 
강압적이 아닌 상호 합의하에 이루어져야 한다.

2.4 명명

API 는 이름 선택이 아주 중요하다. 한 번 공개된 API는 바꾸기 어렵기 때문이다. 이름은 사물의 정체성을 의미한다.

2.4.1 불필요한 반복을 피하라

불필요하게 반복되는 단어를 피하라.

2.4.2 명확하게 하라

간결함보다는 명확함이 우선이다. 이름을 짧게 줄이는 것은 타이핑의 수를 줄이기 위함이 아니다. 타이핑 하는 경우보다는 변수 이름을 읽는 경우가 훨씬 많다.
문맥이 전체 내용을 자우한다.

2.4.3 관용어법을 지키라

대문자화 규약을 따르자.

2.4.4 정확하게 하라

명명을 정확하게 하라.

2.5 스스로 가다듬기

우리는 항상 나쁜 포맷의 코드와 마주친다. 
코드를 정리정돈 해야 하는 경우에는 기능 변경과 모양 변경을 동시에 진행하지 말라. 레이아웃 스타일을 고른 뒤에도 평생 고수하지 말아라.
경험 쌓으며 자신만의 레이아웃 스타일을 발전시켜나가라.

3. 코드 적게 쓰기

많은 양의 코드 작성이 곧 다량의 소프트웨어 개발을 의미하지는 않는다. 소프트웨어를 개선하는 최고의 방법 가운데 하나는 코드를 제어하는 것이다.

3.1 코드에 신경 써야 하는 이유

소프트웨어 시스템이 기능하는 한, 코드들은 유지 보수되어야 한다. 각 줄의 코드마다 비용이 들고 코드를 길게 많이 쓸수록 유지 보수 비용은 높아진다.
불필요한 코드는 함수의 목적을 가리고, 비슷한 코드들 간의 작지만 중요한 차이점을 알아채지 못하게 만들어 버릴 수 있다.
중복 코드는 치명적이다. 하나의 버그를 고친다 하였을 때, 다른 32개의 똑같은 버그들이 있다고 생각해 보라.

3.2 허술한 논리

if (expression)
    retrun true;
else
    return false;

무의미한 코드는 논리 구조에 대한 이해가 없다는 뜻이다.
다음은 아래와 같이 바꿀 수 있다.

return expression;

다른 예

if (something == true){/...}

=> if(something){/...}

리팩토링은 코드 가독성을 높이고, 내부 구조를 향상하며, 유지 보수를 원활히 하기 위한 것이다. 무엇보다도, 나중에 있을 기능 향상에 대비하려는 것이다.
제대로 된 리팩토링은 훈련이 필요하다.

3.3 중복 

이 같은 범죄 행위는 보통 잘라내기와 붙여넣기를 통해 발생한다. 코드를 복사한다는 것은 존재하는 버그는 모두 복사하되 반복 구조는 숨긴다는 뜻이다.
리펙토링은 중복된 코드를 하나의 함수로 만드는 일이다. 약간 다르지만 비슷한 코드가 있다면, 다른 부분을 파악하여 하나의 함수에서 매개 변수로 분기 처리하자.

비슷한 코드를 하나의 공통 함수에 넣으되 코드에 대한 책임감이 필요하다.

중복을 발견하면 제거하라.

3.4 죽은 코드

죽은 코드란 실행되거나 호출되지 않는 생명력 없는 코드를 말한다. 
한 번도 호출되지 않는 함수
선언되었지만 할당되지는 않은 변수
내부 메서드에 전달되었지만 사용되지는 않는 매개 변수
전혀 사용되지 않는 열거형, 구조체, 클래스, 인터페이스

3.5 주석

좋은 코드는 작동법을 설명하는 대량의 주석을 필요로 하지 않는다. 변수, 함수, 클래스 이름의 적절한 선택과 올바른 구조는 코드를 더 명확하게 만든다.
주석에서 모든 정보를 복사해 표현 하는 것이야 말로 불필요한 중복이다.
사실 주석을 달아야 할 만큼 복잡한 알고리즘이란 거의 존재하지 않는다. 다만 일부 알고리즘은 주석을 필요로 한다. 그 차이점을 공부해보라.
의미없는 아스키 아트는 하지 말라.