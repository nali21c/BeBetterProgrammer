#### 3.6 장황한 내용
의도를 파악할 수 있는 쉬운 코드로.
만약 언어에서 제공된다면 삼항 연산자(temary operator)를 쓰자.

`return url == null ? null :url.getPath`

변수의 선언 부분과 정의 부분을 같은 위치에 쓰면 좋을 수 있다. 

#### 3.7 나쁜 설계
나쁜 설계는 데이터가 많아질수록 더 많은 오류가 발생할 것이다.
시간이 지나면 컴포넌트가 사용되지 않을 수 있고, 이같은 현상이 발생했을 때 죽은 숲을 갈아엎는 것을 두려워하지 말라.

#### 3.8 공백
적절한 타이밍의 침묵이 중요한 것처럼 적절한 공백은 코드 구조에 도움이 된다.

#### 3.9 그래서 무엇을 해야 할까
코드에 대한 책임감을 느껴야 한다. 불필요한 코드를 쓰지 말고 코드를 줄이며 균형을 유지하라.
코드를 작성한 후 스스로 리뷰해보라. 기능 개선과 코드 정렬은 구분해서 해야한다.

* 적게 쓰며 더 재미난 것을 찾아라

## 코드 줄여 개선하기

#### 4.1 제멋대로인 코드
의미가 있을 때만 코드를 작성하라. 당장 필요하지 않다면 지금 작성하지 말라.

#### 4.2 불가피한 결과물